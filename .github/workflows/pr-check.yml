name: PR Check

on:
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run lint
      run: ./gradlew lint

    # - name: Run tests
    #   run: ./gradlew test

    - name: Build debug APK
      run: ./gradlew assembleDebug

    - name: Comment PR with build status
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Build Status')
          );
          
          const status = '${{ job.status }}' === 'success' ? '✅ Success' : '❌ Failed';
          const body = `## Build Status: ${status}
          
          - **Lint**: ${{ steps.lint.outcome || 'N/A' }}
          - **Tests**: ${{ steps.test.outcome || 'N/A' }}
          - **Build**: ${{ steps.build.outcome || 'N/A' }}
          
          Commit: \`${{ github.sha }}\`
          Workflow: [View details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          } 